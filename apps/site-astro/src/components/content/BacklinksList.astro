---
import { getSanityTypeDisplayText } from "@/lib/sanityStrings";
import { cn } from "@/lib/utils";
import type { Backlink, BacklinkResult } from "@/queries/partials/backlink";
import BacklinkCard from "./BacklinkCard.astro";
import MasonryLayout from "@/layouts/MasonryLayout.astro";

interface Props {
  backlinks: BacklinkResult;
  className?: string;
  grouped?: boolean;
}

const { backlinks, className, grouped = false } = Astro.props;

type SanityTypes = Backlink["_type"];

type BacklinkBucket = {
  [K in SanityTypes]: Backlink[];
};

function bucketBacklinksByType(backlinks: Backlink[]) {
  // Use this structure to set the display order of buckets
  // Buckets not listed here will show at the end
  const backlinkBuckets: BacklinkBucket = {
    post: [],
    concept: [],
    project: [],
    note: [],
    resource: [],
    tag: [],
  };

  for (const backlink of backlinks) {
    const type = backlink._type;

    if (backlinkBuckets[type]) {
      backlinkBuckets[type].push(backlink);
    } else {
      backlinkBuckets[type] = [backlink];
    }
  }

  return backlinkBuckets;
}

const buckets = backlinks ? bucketBacklinksByType(backlinks) : [];
---

{
  !grouped && (
    <MasonryLayout class={className} data-pagefind-ignore>
      {backlinks &&
        backlinks.map((backlink) => <BacklinkCard backlink={backlink} />)}
    </MasonryLayout>
  )
}

{
  grouped &&
    Object.entries(buckets)
      .filter(([type, backlinks]) => backlinks.length > 0)
      .map(([type, backlinks]: [unknown, Backlink[]]) => {
        const typedType = type as SanityTypes;
        return (
          <div class="mb-10" data-pagefind-ignore>
            <h3 class="h3 my-4">{getSanityTypeDisplayText(typedType, true)}</h3>
            <MasonryLayout class={className} data-pagefind-ignore>
              {backlinks &&
                backlinks.map((backlink) => (
                  <BacklinkCard backlink={backlink} />
                ))}
            </MasonryLayout>
          </div>
        );
      })
}
