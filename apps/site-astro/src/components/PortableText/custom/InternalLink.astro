---
import {
  Popover,
  PopoverContent,
  PopoverTrigger,
} from "@/components/content/Popover";
import { splitIntoLines } from "@/lib/stringUtils";
import { getUrlForSanityType } from "@/lib/url";
import type { Props as $, Mark } from "astro-portabletext/types";
import type { InternalLinkAnnotation } from "content-models";
import { Link } from "lucide-react";
export type Props = $<Mark<InternalLinkAnnotation>>;

const {
  node: { markDef },
} = Astro.props;

function buildLinks(mark: InternalLinkAnnotation) {
  const links: { url: string; text: string; internal: boolean }[] = [];

  links.push({
    url: getUrlForSanityType(
      mark.internalLink._type,
      mark.internalLink.slug.current,
    ),
    text: mark.internalLink.title,
    internal: true,
  });

  // If this is a resource that also has a parent resource,
  // provide links to both pages
  if (
    "parentResource" in mark.internalLink &&
    mark.internalLink.parentResource !== null
  ) {
    links.push({
      url: getUrlForSanityType(
        mark.internalLink.parentResource._type,
        mark.internalLink.parentResource.slug.current,
      ),
      text: mark.internalLink.parentResource.title,
      internal: false,
    });
  }

  return links;
}

const [mainLink, ...otherLinks] = buildLinks(markDef);
const lines = splitIntoLines(markDef.internalLink.description);
---

{
  markDef.showPopover && (
    <Popover>
      <PopoverTrigger>
        <slot />
      </PopoverTrigger>

      <PopoverContent>
        <div class="flex flex-col justify-between gap-2 leading-snug">
          {lines.map((line, i) => (
            <p class="text-md" set:html={line} />
          ))}

          <nav class="mt-2">
            <ol class="flex items-center">
              {otherLinks &&
                otherLinks.map((link) => {
                  return (
                    <li class="flex items-center overflow-hidden">
                      <a
                        href={link.url}
                        class="pt-popover-content-link link truncate"
                      >
                        {link.text}
                      </a>
                      <svg
                        class="w-3 h-3 mx-2 text-muted"
                        aria-hidden="true"
                        xmlns="http://www.w3.org/2000/svg"
                        fill="none"
                        viewBox="0 0 6 10"
                      >
                        <path
                          stroke="currentColor"
                          stroke-linecap="round"
                          stroke-linejoin="round"
                          stroke-width="2"
                          d="m1 9 4-4-4-4"
                        />
                      </svg>
                    </li>
                  );
                })}
              <li class="flex items-center overflow-hidden">
                <a
                  href={mainLink.url}
                  class="pt-popover-content-link link truncate"
                >
                  {mainLink.text}
                </a>
              </li>
            </ol>
          </nav>
        </div>
      </PopoverContent>
    </Popover>
  )
}
{
  !markDef.showPopover && (
    <a href={mainLink.url} title={mainLink.text}>
      <slot />
    </a>
  )
}
